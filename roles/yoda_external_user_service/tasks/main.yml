---
# copyright Utrecht University

- name: Remove no longer used Yoda External User Service dependencies
  ansible.builtin.package:
    name:
      - php-pdo
      - php-pgsql
      - php-password-compat
      - php-PHPMailer
    state: absent

- name: Generate Flask secret key
  ansible.builtin.shell: openssl rand -base64 32 > /var/www/yoda/flask_secret_key
    creates=/var/www/yoda/flask_secret_key
  when: not ansible_check_mode and flask_secret_key is not defined


- name: Retrieve Flask secret key
  ansible.builtin.slurp:
    src: /var/www/yoda/flask_secret_key
  register: secret_key
  when: not ansible_check_mode and flask_secret_key is not defined


- name: Store Flask secret key in variable
  ansible.builtin.set_fact:
    flask_secret_key: "{{ secret_key['content'] }}"
  when: not ansible_check_mode and flask_secret_key is not defined


# This is needed for for EUS to be able to load the bcrypt shared libraries
- name: Ensure httpd_unified seboolean is enabled
  ansible.posix.seboolean:
    name: httpd_unified
    state: true
    persistent: true


- name: Ensure yodadeployment user exists
  ansible.builtin.user:
    name: "{{ yoda_deployment_user }}"


- name: Ensure parent directories for EUS repositories are accessible
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ yoda_deployment_user }}"
    group: "{{ yoda_deployment_user }}"
    mode: '0711'
  with_items:
    - /var/www/extuser
    - /var/www/yoda


# EUS depends on the Yoda portal for theming information. So running mismatched versions
# can result in unexpected errors.
- name: Check whether Yoda portal version matches EUS version
  ansible.builtin.fail: # noqa ignore-errors
    msg: "Warning: mismatched EUS and portal version can result in EUS theming problems."
  when: "yoda_portal_version != yoda_eus_version"
  ignore_errors: true


- name: Checkout Yoda External User Service source
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.git:
    repo: "https://github.com/UtrechtUniversity/yoda-external-user-service.git"
    dest: "/var/www/extuser/yoda-external-user-service"
    version: "{{ yoda_eus_version }}"
    force: true


- name: Check out Yoda portal for themes used by External User Service
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.git:
    repo: "https://github.com/UtrechtUniversity/yoda-portal.git"
    dest: "/var/www/yoda"
    version: "{{ yoda_portal_version }}"
    force: true
  when: "'portals' not in group_names"


- name: Check portal version for cache buster
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.command:  # noqa no-changed-when command-instead-of-module
    chdir: /var/www/yoda
    cmd: git rev-parse HEAD
  changed_when: false
  register: portal_git_commit


- name: Check EUS version for cache buster
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.command:  # noqa no-changed-when command-instead-of-module
    chdir: /var/www/extuser/yoda-external-user-service
    cmd: git rev-parse HEAD
  changed_when: false
  register: eus_git_commit


- name: Allow public to API port for External User Service in firewall
  ansible.posix.firewalld:
    port: '{{ eus_api_port }}/tcp'
    permanent: true
    state: enabled
    immediate: true
  notify: Restart firewall


- name: Create Yoda External User Service database
  become_user: postgres
  become: true
  community.postgresql.postgresql_db:
    name: "{{ eus_db_name }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0


- name: Create Yoda External User Service database user
  become_user: postgres
  become: true
  community.postgresql.postgresql_user:
    db: "{{ eus_db_name }}"
    name: "{{ eus_db_user }}"
    password: "{{ eus_db_password }}"
    priv: CREATE
  when: not ansible_check_mode


- name: Make sure database user has permissions on tables
  become_user: postgres
  become: true
  community.postgresql.postgresql_privs:
    database: "{{ eus_db_name }}"
    state: present
    privs: SELECT,INSERT,UPDATE,DELETE,REFERENCES
    type: table
    roles: "{{ eus_db_user }}"
    objs: ALL_IN_SCHEMA
    grant_option: true
  when: not ansible_check_mode


- name: Create configuration file
  ansible.builtin.template:
    src: flask.cfg.j2
    dest: /var/www/extuser/flask.cfg
    owner: "{{ yoda_deployment_user }}"
    mode: '0644'
  notify: Restart Apache webserver


- name: Ensure Yoda EUS virtualenv exists
  become_user: '{{ yoda_deployment_user }}'
  become: true
  ansible.builtin.command: virtualenv --python /opt/rh/rh-python38/root/bin/python3 "/var/www/extuser/yoda-external-user-service/venv"
  args:
    creates: "/var/www/extuser/yoda-external-user-service/venv"


- name: Upgrade pip in EUS virtual environment
  become_user: '{{ yoda_deployment_user }}'
  become: true
  ansible.builtin.pip:
    name:
      - pip==23.0.1
    executable: /var/www/extuser/yoda-external-user-service/venv/bin/pip3


# Change detection in git repositories is unreliable in some Ansible versions, so we always
# run this task, just to be sure.
- name: Ensure Yoda EUS dependencies are installed
  become_user: '{{ yoda_deployment_user }}'
  become: true
  ansible.builtin.pip:
    name: '/var/www/extuser/yoda-external-user-service'
    virtualenv: '/var/www/extuser/yoda-external-user-service/venv'
    extra_args: "-e"
  changed_when: false
  environment:
    C_INCLUDE_PATH: /opt/rh/rh-python38/root/usr/include/python3.8
  notify: Restart Apache webserver


- name: Upload WSGI file for External User Service
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: '/var/www/extuser/{{ item }}'
    owner: '{{ yoda_deployment_user }}'
    group: '{{ yoda_deployment_user }}'
    mode: '0755'
  notify: Restart Apache webserver
  with_items:
    - yoda_eus_api.wsgi
    - yoda_eus_noapi.wsgi


- name: Copy Yoda External User Service virtual host config for Apache
  ansible.builtin.template:
    src: "yoda-external-user-service-vhost.conf.j2"
    dest: "/etc/httpd/conf.d/yoda-external-user-service-vhost.conf"
    mode: '0644'
  notify: Restart Apache webserver


- name: Restore SELinux contexts on EUS files
  ansible.builtin.command: 'restorecon -r /var/www/extuser'
  when: ansible_selinux.status == "enabled"
  changed_when: false
