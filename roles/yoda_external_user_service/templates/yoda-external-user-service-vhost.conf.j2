# {{ ansible_managed }}
# yoda-external-user-service-vhost.conf

<VirtualHost *:80>
    ServerName {{ yoda_eus_fqdn }}

    # Always redirect to https.
    {% if yoda_eus_port == 443 %}
        Redirect / https://{{ yoda_eus_fqdn }}/
    {% else %}
        Redirect / https://{{ yoda_eus_fqdn }}:{{ yoda_eus_port | string }}/
    {% endif %}
</VirtualHost>

{% if yoda_eus_port != 443 %}
Listen {{ yoda_eus_port }}
{% endif %}

<VirtualHost *:{{ yoda_eus_port }}>
    ServerName {{ yoda_eus_fqdn }}
    <Directory /var/www/extuser>
        AllowOverride All
        Require all granted
    </Directory>

    WSGIDaemonProcess yoda_eus user={{ yoda_deployment_user }} group={{ yoda_deployment_user }} threads=5 python-home=/var/www/extuser/yoda-external-user-service/venv
    WSGIProcessGroup yoda_eus
    WSGIScriptAlias / /var/www/extuser/yoda_eus_noapi.wsgi
    WSGIScriptReloading On
    WSGIPassAuthorization On

    CustomLog {{ yoda_external_user_service_apache_log_dir }}/eus_access.log common

    # intermediate TLS configuration
    SSLEngine               on
    SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    SSLHonorCipherOrder     off
    SSLCompression          off

    # HSTS (mod_headers is required) (31536000 seconds = 1 year)
    Header always set Strict-Transport-Security "max-age=31536000"

    #   Server Certificate:
    #   Point SSLCertificateFile at a PEM encoded certificate.  If
    #   the certificate is encrypted, then you will be prompted for a
    #   pass phrase.  Note that a kill -HUP will prompt again.  A new
    #   certificate can be generated using the genkey(1) command.
    SSLCertificateFile      {{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }}

    #   Server Private Key:
    #   If the key is not combined with the certificate, use this
    #   directive to point at the key file.  Keep in mind that if
    #   you've both a RSA and a DSA private key you can configure
    #   both in parallel (to also allow the use of DSA ciphers, etc.)
    SSLCertificateKeyFile   {{ openssl_private_dir }}/{{ openssl_key_signed }}
</VirtualHost>

Listen {{ eus_api_port }}
<VirtualHost  *:{{ eus_api_port }}>
    ServerName {{ yoda_eus_fqdn }}
    <Directory /var/www/extuser>
        AllowOverride All
        Require all granted
    </Directory>

    WSGIDaemonProcess yoda_eus_api user={{ yoda_deployment_user }} group={{ yoda_deployment_user }} threads=5 python-home=/var/www/extuser/yoda-external-user-service/venv
    WSGIProcessGroup yoda_eus
    WSGIScriptAlias / /var/www/extuser/yoda_eus_api.wsgi
    WSGIScriptReloading On
    WSGIPassAuthorization On

    CustomLog {{ yoda_external_user_service_apache_log_dir }}/eus_access.log common

    # intermediate TLS configuration
    SSLEngine               on
    SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
    SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    SSLHonorCipherOrder     off
    SSLCompression          off

    # HSTS (mod_headers is required) (31536000 seconds = 1 year)
    Header always set Strict-Transport-Security "max-age=31536000"

    #   Server Certificate:
    #   Point SSLCertificateFile at a PEM encoded certificate.  If
    #   the certificate is encrypted, then you will be prompted for a
    #   pass phrase.  Note that a kill -HUP will prompt again.  A new
    #   certificate can be generated using the genkey(1) command.
    SSLCertificateFile      {{ openssl_certs_dir }}/{{ openssl_crt_signed }}
    SSLCertificateChainFile {{ openssl_certs_dir }}/{{ openssl_chain }}

    #   Server Private Key:
    #   If the key is not combined with the certificate, use this
    #   directive to point at the key file.  Keep in mind that if
    #   you've both a RSA and a DSA private key you can configure
    #   both in parallel (to also allow the use of DSA ciphers, etc.)
    SSLCertificateKeyFile   {{ openssl_private_dir }}/{{ openssl_key_signed }}
</VirtualHost>
