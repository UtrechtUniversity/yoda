---
# copyright Utrecht University

- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"


- name: Populate service facts
  ansible.builtin.service_facts:


- name: Ensure systemd unit file present
  ansible.builtin.template:
    src: irods.service.j2
    dest: /lib/systemd/system/irods.service
    owner: root
    group: root
    mode: '0644'
  notify: Systemd daemon reload


- name: Ensure iRODS resource server is installed
  ansible.builtin.package:
    name:
      - "{{ irods_server_package_new }}"
      - "{{ irods_runtime_package_new }}"
      - "{{ irods_prep_package_new }}"
    state: present
  when: not ansible_check_mode


- name: Ensure iRODS resource server is pinned
  ansible.builtin.template:
    src: 'irods_resource.pref.j2'
    dest: '/etc/apt/preferences.d/irods_resource.pref'
    mode: '0644'
    owner: 'root'
    group: 'root'
  when: ansible_os_family == 'Debian'


- name: Flush handlers to restart iRODS if needed
  ansible.builtin.meta: flush_handlers


- name: Retrieve iRODS iCAT server
  ansible.builtin.set_fact:
    'irods_icat': '{{ item }}'
  with_inventory_hostnames:
    - 'icats:&{{ instance }}'


- name: Check if connection to iCAT server can be established
  ansible.builtin.wait_for:
    host: '{{ irods_icat }}'
    port: 1247


- name: Store iRODS server keys in variables
  ansible.builtin.set_fact:
    '{{ item.fact }}': '{{ item.key }}'
  with_items:
    - fact: irods_zone_key
      key: "{{ hostvars[irods_icat]['zone_key'] }}"
    - fact: irods_negotiation_key
      key: "{{ hostvars[irods_icat]['negotiation_key'] }}"
    - fact: irods_control_plane_key
      key: "{{ hostvars[irods_icat]['server_control_plane_key'] }}"
  when: not ansible_check_mode


- name: Check if iRODS config file exists
  ansible.builtin.stat:
    path: /etc/irods/service_account.config
  ignore_errors: true
  register: irods_config


- name: Copy responses for setup_irods.py
  ansible.builtin.template:
    src: setup_irods_consumer.json.j2
    dest: /etc/irods/setup_irods_consumer.json
    mode: '0644'
    force: false
  when: not irods_config.stat.exists and not ansible_check_mode


- name: Configure iRODS resource server
  become: true
  ansible.builtin.command: python /var/lib/irods/scripts/setup_irods.py --json_configuration_file=/etc/irods/setup_irods_consumer.json
  args:
    creates: /etc/irods/service_account.config
  when: not ansible_check_mode


- name: Ensure iRODS setup file is absent
  ansible.builtin.file:
    path: /etc/irods/setup_irods_consumer.json
    state: absent


- name: Ensure iRODS service account is owner of iRODS directories
  ansible.builtin.file:
    group: '{{ irods_service_account }}'
    owner: '{{ irods_service_account }}'
    recurse: true
    path: '{{ item }}'
  with_items:
    - /var/lib/irods
    - /etc/irods


- name: Ensure core.re is configured
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.template:
    src: core.re.j2
    dest: /etc/irods/core.re
    mode: '0644'


- name: Ensure core Python rules are present
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.copy:
    content: ""
    dest: "/etc/irods/core.py"
    mode: '0644'
    force: false


- name: Ensure iRODS server is up
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.command: 'ils /{{ irods_zone }}/home'
  register: ils
  ignore_errors: true
  changed_when: ils is failed


- name: Start iRODS server
  ansible.builtin.service:
    name: irods
    state: started
  when: ils is failed


- name: Configure iRODS systemd service
  ansible.builtin.service:
    name: irods
    enabled: "{{ irods_enable_service }}"
    use: service


- name: Wait until iRODS server is ready to receive requests
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.command: # noqa no-changed-when
    cmd: 'ils /{{ irods_zone }}/home'
  register: ils
  until: ils is succeeded
  retries: 5
  delay: 10
  when: ils is failed


- name: Ensure Python plugin is configured
  become_user: '{{ irods_service_account }}'
  become: true
  # noqa fqcn[action]
  irods_python:
    config_path: '/etc/irods/server_config.json'
  when: not ansible_check_mode


- name: Enable ports for resource in firewall
  ansible.posix.firewalld:
    port: '{{ item }}'
    permanent: true
    state: enabled
    immediate: true
  with_items:
    - '{{ irods_icat_port }}/tcp'
    - '{{ irods_port_range_begin }}-{{ irods_port_range_end }}/tcp'
  notify: Restart firewall


- name: Ensure private key file is available for iRODS
  ansible.builtin.command: 'cp {{ openssl_private_dir }}/{{ openssl_key_signed }} {{ openssl_key_signed }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_key_signed }}'


- name: Ensure CA chain with signed certificate is present
  ansible.builtin.file:
    src: "{{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }}"
    dest: "/etc/irods/{{ openssl_crt_signed_and_chain }}"
    state: link


- name: Ensure Diffie-Hellman parameters are present
  ansible.builtin.command: openssl dhparam -2 -out {{ openssl_dhparams }} 2048
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_dhparams }}'


- name: Ensure iRODS has access to PKI files
  ansible.builtin.file:
    path: '{{ item }}'
    mode: '0644'
    group: 'root'
    owner: 'root'
    state: file
  with_items:
    - '/etc/irods/{{ openssl_key_signed }}'
    - '/etc/irods/{{ openssl_dhparams }}'
  when: not ansible_check_mode


- name: Ensure iRODS has access to PKI files
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '0644'
    group: 'root'
    owner: 'root'
    state: link
  with_items:
    - src: '{{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }}'
      dest: '/etc/irods/{{ openssl_crt_signed_and_chain }}'
  when: not ansible_check_mode


- name: Get iRODS home directory
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.command: echo ~
  register: irods_directory
  changed_when: false
  check_mode: false


- name: Ensure iRODS is configured to use SSL
  become_user: '{{ irods_service_account }}'
  become: true
  # noqa fqcn[action]
  irods_config:
    path: "{{ irods_directory.stdout }}/.irods/irods_environment.json"
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'irods_ssl_certificate_chain_file'
      value: '/etc/irods/{{ openssl_crt_signed_and_chain }}'
    - key: 'irods_ssl_certificate_key_file'
      value: '/etc/irods/{{ openssl_key_signed }}'
    - key: 'irods_ssl_dh_params_file'
      value: '/etc/irods/{{ openssl_dhparams }}'
    - key: 'irods_client_server_policy'
      value: 'CS_NEG_REQUIRE'
    - key: 'irods_ssl_verify_server'
      value: '{{ irods_ssl_verify_server }}'


- name: Ensure iRODS server keys are synced
  become_user: '{{ irods_service_account }}'
  become: true
  # noqa fqcn[action]
  irods_config:
    path: '/etc/irods/server_config.json'
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'zone_key'
      value: "{{ irods_zone_key }}"
    - key: 'server_control_plane_key'
      value: "{{ irods_control_plane_key }}"
    - key: 'negotiation_key'
      value: "{{ irods_negotiation_key }}"
  when: not ansible_check_mode


- name: Ensure iRODS .ssh directory has strict permissions
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: '0700'
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'


- name: Install private upload key
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.template:
    src: id_ed25519.j2
    dest: '~/.ssh/id_ed25519'
    owner: '{{ irods_service_account }}'
    mode: '0600'
  no_log: true
  when: upload_priv_key is defined


- name: Scan public host pub key
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.shell: "ssh-keyscan {{ yoda_public_host }} >> ~/.ssh/known_hosts"
  args:
    creates: '~/.ssh/known_hosts'
  when: upload_priv_key is defined
