---
# copyright Utrecht University

- name: Ensure Python dependencies are installed
  ansible.builtin.package:
    name:
      - python-pip
    state: present


- name: Sanity check ruleset names
  ansible.builtin.fail:
    msg: 'Invalid ruleset name {{ item.name }}'
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "'/' in item.name or '..' in item.name"


- name: Check out rulesets without local patches from Github
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.git:
    repo: "{{ item.repo }}"
    dest: "/etc/irods/{{ item.name }}"
    version: "{{ item.version }}"
    update: "{{ update_rulesets }}"
    force: true
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "'repo' in item and 'patch' not in item"
  register: repochanges


- name: Check out rulesets with local patches from Github
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.git:
    repo: "{{ item.repo }}"
    dest: "/etc/irods/repo_{{ item.name }}"
    version: "{{ item.version }}"
    update: "{{ update_rulesets }}"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "'repo' in item and 'patch' in item"
  register: patch_repochanges


- name: Sync rulesets with repos before applying patches
  become_user: "{{ irods_service_account }}"
  become: true
  synchronize:
    src: "/etc/irods/repo_{{ item.name }}/"
    dest: "/etc/irods/{{ item.name }}"
    checksum: true
    delete: true
    rsync_opts:
      - "--exclude=rules_uu.cfg"
  delegate_to: "{{ inventory_hostname }}"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "not ansible_check_mode and 'repo' in item and 'patch' in item"


- name: Create patch files for rulesets
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.copy: # noqa template-instead-of-copy
    dest: "/etc/irods/{{ item.name }}.patch"
    content: "{{ item['patch'] }}"
    mode: "0644"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "'repo' in item and 'patch' in item"


- name: Apply patches to rulesets
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.command: # noqa command-instead-of-module
    chdir: "/etc/irods/{{ item.name }}"
    cmd: "git apply /etc/irods/{{ item.name }}.patch"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "'repo' in item and 'patch' in item and item['patch'] not in ['']"


- name: Remove temporary rule and cache files
  become_user: '{{ irods_service_account }}'
  become: true
  ansible.builtin.command: # noqa no-handler
    cmd: '/bin/find /etc/irods -type f ( -name "*.re.*" -o -name "*.pyc" ) -delete'
  when: repochanges.changed or patch_repochanges.changed


- name: Run make install for each ruleset
  become_user: "{{ irods_service_account }}"
  become: true
  make:
    chdir: "/etc/irods/{{ item.0.name }}"
    target: install
  when: item.1.changed or ( 'repo' in item.0 and 'patch' in item.0 )
  with_together:
    - "{{ extra_rulesets + core_rulesets }}"
    - "{{ repochanges.results }}"
    - "{{ patch_repochanges.results }}"


- name: Install requirements for ruleset
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.pip:
    requirements: /etc/irods/yoda-ruleset/requirements.txt
    extra_args: --user


- name: Ensure all rulesets are in server config
  become_user: "{{ irods_service_account }}"
  become: true
  irods_rulesets:
    config_path: "/etc/irods/server_config.json"
    rulesets: "{{ (extra_rulesets + core_rulesets) | map(attribute='ruleset_name') | list }}"
  when: not ansible_check_mode


- name: Ensure Python rules are loaded
  become_user: "{{ irods_service_account }}"
  become: true
  ansible.builtin.copy:
    src: "core.py.template"
    dest: "/etc/irods/core.py"
    mode: 0644


- include_tasks: "{{ ruleset.name }}.yml"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  loop_control:
    loop_var: ruleset
  when: ruleset.install_scripts and install_rulesets
