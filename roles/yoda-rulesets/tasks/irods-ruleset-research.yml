---
# Copyright Utrecht University

- name: Find out if default metadata schema is installed
  become_user: "{{ irods_service_account }}"
  become: yes
  command: 'ils /{{ irods_zone }}/yoda/schemas/default/{{ item }}'
  ignore_errors: true
  register: installed_defaults
  changed_when: false
  with_items:
    - metadata.json
    - research.xsd
    - vault.xsd
    - avu.xsl
    - datacite.xsl
    - landingpage.xsl


- name: Ensure default metadata schema is installed
  become_user: "{{ irods_service_account }}"
  become: yes
  command: >
    irule -F /etc/irods/irods-ruleset-research/tools/install-metadata-schema.r
    '*resc="{{ irods_default_resc }}"'
    '*src="/etc/irods/irods-ruleset-research/tools/schemas/"'
    '*schema="{{ default_yoda_schema }}"'
    '*category="default"'
    '*update={{ update_schemas }}'
  register: install_default_xml_for_metadata
  when: (update_schemas == 1) or
        (installed_defaults|json_query('results[*].stderr')|join(' ') is search('does not exist'))
  changed_when: install_default_xml_for_metadata.stdout is search('(Installed|Updated)')


- name: List installed or updated schemas, formelements or stylesheets
  become_user: "{{ irods_service_account }}"
  become: yes
  debug:
    var: item
  when: item is search('(Installed|Updated)')
  with_items: "{{ install_default_xml_for_metadata.stdout_lines|default('Script did not run') }}"


- name: Find out if terms and conditions system collection exists
  become_user: "{{ irods_service_account }}"
  become: yes
  command: 'ils /{{ irods_zone }}/yoda/terms'
  ignore_errors: True
  register: terms_installed
  changed_when: False


- name: Install terms and conditions
  become_user: "{{ irods_service_account }}"
  become: yes
  shell: |
    iput -r /etc/irods/irods-ruleset-research/tools/terms /{{ irods_zone }}/yoda
    ichmod -rM inherit /{{ irods_zone }}/yoda/terms
    ichmod -rM read public /{{ irods_zone }}/yoda/terms
  when: (not ansible_check_mode) and (terms_installed.stderr.find('does not exist') >= 0)


- name: Find out if preservable file formats lists system collection exists
  become_user: "{{ irods_service_account }}"
  become: yes
  command: 'ils /{{ irods_zone }}/yoda/file_formats'
  ignore_errors: True
  register: formats_installed
  changed_when: False


- name: Install preservable file formats lists
  become_user: "{{ irods_service_account }}"
  become: yes
  shell: |
    iput -r /etc/irods/irods-ruleset-research/tools/file_formats /{{ irods_zone }}/yoda
    ichmod -rM inherit /{{ irods_zone }}/yoda/file_formats
    ichmod -rM read public /{{ irods_zone }}/yoda/file_formats
  when: (not ansible_check_mode) and (formats_installed.stderr.find('does not exist') >= 0)


- name: Ensure that Yoda publication directory is present
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imkdir /{{ irods_zone }}/yoda/publication
  changed_when: False
  failed_when: False


- name: Install script for revision clean up
  become_user: "{{ irods_service_account }}"
  become: yes
  template:
    src: cronjob-revision-cleanup.sh.j2
    dest: '~{{ irods_service_account }}/.irods/cronjob-revision-cleanup.sh'
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'


- name: Configure cronjob to process publications
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'process-publication.r'
    minute: '*'
    job: '/bin/irule -F /etc/irods/irods-ruleset-research/tools/process-publication.r >/dev/null 2>&1'


- name: Configure cronjob to retry copy-to-vault
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'retry-copy-to-vault.r'
    minute: '*'
    job: '/bin/irule -F /etc/irods/irods-ruleset-research/tools/retry-copy-to-vault.r >/dev/null 2>&1'


- name: Configure cronjob to clean up revisions
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'cronjob-revision-cleanup.sh'
    minute: 0
    hour: 2
    job: '/bin/bash /var/lib/irods/.irods/cronjob-revision-cleanup.sh >> /var/lib/irods/log/cronjob-revision-cleanup.log 2>&1'


- name: Ensure that ExecCmd dir exists
  file:
    path: /var/lib/irods/msiExecCmd_bin
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
    mode: 0755
    state: directory
  when: not ansible_check_mode


- name: Copy scripts to ExecCmd dir
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    remote_src: yes
    src: "/etc/irods/irods-ruleset-research/tools/{{ item }}"
    dest: "/var/lib/irods/msiExecCmd_bin/{{ item }}"
    mode: 0755
  when: not ansible_check_mode
  with_items:
    - securecopy.sh
    - scheduled-copytovault.sh
    - admin-vaultactions.sh
    - admin-vaultingest.sh


- name: Set configuration AVUs for research ruleset to system collection
  become_user: "{{ irods_service_account }}"
  become: yes
  irods_setavu:
    name: "/{{ irods_zone }}/yoda"
    irods_type: Collection
    attribute: "{{ avu.attribute }}"
    value: "{{ avu.value }}"
  with_items:
    - attribute: org_datacite_prefix
      value: "{{ datacite_prefix }}"
    - attribute: org_yoda_instance
      value: "{{ yoda_instance }}"
    - attribute: org_moai_host
      value: "{{ yoda_public_host }}"
    - attribute: org_random_id_length
      value: "{{ yoda_random_id_length }}"
    - attribute: org_yoda_prefix
      value: "{{ yoda_prefix }}"
    - attribute: org_public_vhost
      value: "{{ yoda_public_fqdn }}{% if (yoda_public_port is defined) %}:{{ yoda_public_port }}{% endif %}"
    - attribute: org_public_host
      value: "{{ yoda_public_host }}"
    - attribute: org_davrods_vhost
      value: "{{ yoda_davrods_fqdn }}{% if (yoda_davrods_port is defined) %}:{{ yoda_davrods_port }}{% endif %}"
  loop_control:
    loop_var: avu

- name: Set configuration AVUs for anonymous davrods vhosts
  become_user: "{{ irods_service_account }}"
  become: yes
  when: (yoda_davrods_anonymous_enabled is defined) and (yoda_davrods_anonymous_enabled)
  irods_setavu:
    name: "/{{ irods_zone }}/yoda"
    irods_type: Collection
    attribute: "{{ avu.attribute }}"
    value: "{{ avu.value }}"
  with_items:
    - attribute: org_davrods_anonymous_vhost
      value: "{{ yoda_davrods_anonymous_fqdn }}{% if (yoda_davrods_anonymous_port is defined) %}:{{ yoda_davrods_anonymous_port }}{% endif %}"
  loop_control:
    loop_var: avu
