---
# copyright Utrecht University

- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"


- name: Ensure yodadeployment user exists
  ansible.builtin.user:
    name: "{{ yoda_deployment_user }}"
    shell: /bin/bash


- name: Ensure yodadeployment has access to /var/www/yoda
  ansible.builtin.file:
    path: /var/www/yoda
    state: directory
    owner: "{{ yoda_deployment_user }}"
    group: "{{ yoda_deployment_user }}"
    mode: '0711'


- name: Checkout Yoda portal
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.git:
    repo: "https://github.com/UtrechtUniversity/yoda-portal.git"
    dest: "/var/www/yoda"
    version: "{{ yoda_portal_version }}"
    force: "yes"
  register: portalchanges


- name: Check if Portal virtual environment is running Python 3.6
  ansible.builtin.stat:
    path: '/var/www/yoda/venv/bin/pip3.6'
  register: portal_venv_python36


# For upgrade to Yoda 1.9
- name: Move old portal virtual environment
  become_user: '{{ yoda_deployment_user }}'
  become: true
  ansible.builtin.command: # noqa no-changed-when
    cmd: "mv /var/www/yoda/venv /var/www/yoda/venv.backup-pre-1.9"
  when: portal_venv_python36.stat.exists


- name: Ensure Yoda portal virtualenv exists
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.command: "virtualenv --python {{ yoda_portal_python3_path }} /var/www/yoda/venv"
  args:
    creates: /var/www/yoda/venv


- name: Upgrade pip in virtual environment
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.pip:
    name:
      - pip==23.0.1
    executable: /var/www/yoda/venv/bin/pip3


- name: Ensure Yoda portal dependencies are installed
  become_user: "{{ yoda_deployment_user }}"
  become: true
  ansible.builtin.pip:
    requirements: /var/www/yoda/requirements.txt
    virtualenv: '/var/www/yoda/venv'
    virtualenv_python: python3.8
  environment:
    C_INCLUDE_PATH: "{{ yoda_portal_python3_include_path }}"
  notify: Restart Apache webserver


- name: Install mod-wsgi
  become_user: "root"
  become: true
  ansible.builtin.shell: |
    source /var/www/yoda/venv/bin/activate
    mod_wsgi-express install-module > /etc/httpd/conf.modules.d/02-wsgi.conf
    exit
  args:
    creates: /etc/httpd/conf.modules.d/02-wsgi.conf
  when: ansible_os_family == 'RedHat'


- name: Generate Flask secret key
  ansible.builtin.shell: openssl rand -base64 32 > /var/www/yoda/flask_secret_key
    creates=/var/www/yoda/flask_secret_key
  when: not ansible_check_mode


- name: Retrieve Flask secret key
  ansible.builtin.slurp:
    src: /var/www/yoda/flask_secret_key
  register: secret_key
  when: not ansible_check_mode


- name: Store Flask secret key in variable
  ansible.builtin.set_fact:
    flask_secret_key: "{{ secret_key['content'] }}"
  when: not ansible_check_mode


- name: Copy Yoda Portal config for Flask
  ansible.builtin.template:
    src: "flask.cfg.j2"
    dest: "/var/www/yoda/flask.cfg"
    mode: '0644'
    owner: "{{ yoda_deployment_user }}"
    group: "{{ yoda_deployment_user }}"
  when: not ansible_check_mode
  notify: Restart Apache webserver


- name: Copy Yoda Portal virtual host config for Apache
  ansible.builtin.template:
    src: "yoda-portal-vhost.conf.j2"
    dest: "{{ yoda_portal_site_config_dir }}/{{ yoda_portal_site_config_file }}"
    mode: '0644'
  notify: Restart Apache webserver


- name: Ensure Yoda Portal virtual host is enabled (Ubuntu)
  ansible.builtin.file:
    src: "{{ yoda_portal_site_config_dir }}//{{ yoda_portal_site_config_file }}"
    dest: "{{ yoda_portal_site_enabled_config_dir }}//{{ yoda_portal_site_config_file }}"
    state: link
  notify: Restart Apache webserver
  when: ansible_os_family == 'Debian'


- name: Set SELinux context for shared libraries
  community.general.sefcontext:
    target: '/var/www/yoda/venv/.*\.so(\..*)?'
    setype: httpd_sys_script_exec_t
    state: present
  register: filescontext
  when: ansible_os_family == 'RedHat' and ansible_selinux.status == "enabled"


# Only running when context changed works unreliably, so just
# run always when SELinux is enabled.
- name: Ensure selinux context is enforced on shared libraries
  ansible.builtin.command: 'restorecon -r /var/www/yoda/venv'
  when: ansible_os_family == 'RedHat' and ansible_selinux.status == "enabled"
  changed_when: false


- name: Allow Flask to connect to OpenSearch
  ansible.posix.seboolean:
    name: httpd_can_network_connect
    state: true
    persistent: true
  when: ansible_os_family == 'RedHat' and ansible_selinux.status == "enabled" and enable_open_search
