---
# copyright Utrecht University

- name: Ensure iRODS 4.2.7 packages are absent
  package:
    name:
      - irods-uu-microservices-4.2.7_0.8.1-1
      - irods-uu-microservices-4.2.6_0.8.0-1
      - irods-sudo-microservices-4.2.7_1.0.0-1
      - irods-sudo-microservices-4.2.6_1.0.0-1
      - davrods-4.2.7_1.4.2-1
      - davrods-4.2.6_1.4.2-1
    state: absent


- name: Ensure iRODS iCAT server, Python rule engine plugin and database plugin are present
  package:
    name:
      - irods-server-4.2.8-1
      - irods-runtime-4.2.8-1
      - irods-database-plugin-postgres-4.2.8-1
      - irods-rule-engine-plugin-python-4.2.8.0-1
    state: present
  when: not ansible_check_mode


- name: Ensure default msiExecCmd binaries are absent
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - /var/lib/irods/msiExecCmd_bin/hello
    - /var/lib/irods/msiExecCmd_bin/irodsServerMonPerf
    - /var/lib/irods/msiExecCmd_bin/test_execstream.py
    - /var/lib/irods/msiExecCmd_bin/univMSSInterface.sh


- name: Ensure unneeded iRODS specific queries are absent
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'iadmin rsq {{ item }}'
  ignore_errors: yes
  with_items:
    - listQueryByAliasLike
    - findQueryByAlias
    - ilsLACollections
    - ilsLADataObjects
    - listSharedCollectionsOwnedByUser
    - listSharedCollectionsSharedWithUser
    - listUserACLForDataObjViaGroup
    - listUserACLForCollectionViaGroup
  changed_when: False


- name: Generate zone key
  command: 'openssl rand -hex 16'
  register: zone_key
  args:
    creates: /etc/irods/service_account.config


- name: Generate negotiation key
  command: 'openssl rand -hex 16'
  register: negotiation_key
  args:
    creates: /etc/irods/service_account.config


- name: Generate control plane key
  command: 'openssl rand -hex 16'
  register: server_control_plane_key
  args:
    creates: /etc/irods/service_account.config


- name: Generate password salt
  command: 'openssl rand -hex 16'
  register: password_salt
  args:
    creates: /etc/irods/service_account.config


- name: Store iCAT keys in variables
  set_fact:
    '{{ item.fact }}': '{{ item.key }}'
  with_items:
    - fact: irods_zone_key
      key: '{{ zone_key.stdout }}'
    - fact: irods_negotiation_key
      key: '{{ negotiation_key.stdout }}'
    - fact: irods_control_plane_key
      key: '{{ server_control_plane_key.stdout }}'
    - fact: irods_password_salt
      key: '{{ password_salt.stdout }}'
  when: not ansible_check_mode


- name: Check if iRODS config file exists
  stat:
    path: /etc/irods/service_account.config
  ignore_errors: true
  register: irods_config


- name: Copy setup JSON for setup_irods.py
  template:
    src: setup_irods_provider.json.j2
    dest: /etc/irods/setup_irods_provider.json
    force: no
  when: not irods_config.stat.exists and not ansible_check_mode


- name: Ensure connection to database is possible
  wait_for:
    host: "{{ irods_database_fqdn }}"
    port: "{{ irods_database_port }}"
    timeout: 30


- name: Configure iRODS iCAT server
  become: yes
  command: python /var/lib/irods/scripts/setup_irods.py --json_configuration_file=/etc/irods/setup_irods_provider.json
  args:
    creates: /etc/irods/service_account.config
  run_once: true
  when: not ansible_check_mode


- name: Ensure iRODS setup file is absent
  file:
    path: /etc/irods/setup_irods_provider.json
    state: absent


- name: Ensure iRODS iCAT host is a FQDN for iRODS 4.1.11
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/etc/irods/server_config.json'
    key: 'icat_host'
    value: '{{ irods_icat_fqdn }}'


- name: Ensure iRODS host is defined
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/var/lib/irods/.irods/irods_environment.json'
    key: 'irods_host'
    value: '{{ irods_icat_fqdn }}'


- name: Set delayed rule sleep time to 1 second
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_advanced:
    path: '/etc/irods/server_config.json'
    key: 'rule_engine_server_sleep_time_in_seconds'
    value: '1'


- name: Ensure core.re is configured
  become_user: '{{ irods_service_account }}'
  become: yes
  template:
    src: core.re.j2
    dest: /etc/irods/core.re
    mode: 0644


- name: Ensure patched Python genquery module is present
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    src: "genquery.py"
    dest: "/etc/irods/genquery.py"
    mode: 0644


- name: Ensure core Python rules are present
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    content: ""
    dest: "/etc/irods/core.py"
    mode: 0644
    force: no


- name: Ensure iRODS server is up
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ils /{{ irods_zone }}/home'
  register: ils
  ignore_errors: true
  changed_when: ils is failed


- name: Start iRODS server
  become_user: '{{ irods_service_account }}'
  become: yes
  command: '/var/lib/irods/irodsctl start'
  when: ils is failed


- name: Wait until iRODS server is ready to receive requests
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ils /{{ irods_zone }}/home'
  register: ils
  until: ils is succeeded
  retries: 5
  delay: 10
  when: ils is failed


- name: Ensure Python plugin is configured
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_python:
    config_path: '/etc/irods/server_config.json'
  when: not ansible_check_mode


- name: Ensure all users have iRODS read access on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils -A /{{ irods_zone }}/home | grep "g:public#"'
  register: read_access
  ignore_errors: true
  changed_when: read_access is failed


- name: Provide iRODS read access for all users on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ichmod -M read public /{{ irods_zone }}/home'
  when: read_access is failed


- name: Enable ports for iCAT in firewall
  firewalld:
    port: '{{ item }}'
    permanent: true
    state: enabled
    immediate: yes
  with_items:
    - '{{ irods_icat_port }}/tcp'
    - '{{ irods_port_range_begin }}-{{ irods_port_range_end }}/tcp'
  notify: Restart firewall


- name: Ensure private key file is available for iRODS
  command: 'cp {{ openssl_private_dir }}/{{ openssl_key_signed }} {{ openssl_key_signed }}'
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_key_signed }}'


- name: Ensure CA chain with signed certificate is present
  file:
    src: "{{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }}"
    dest: "/etc/irods/{{ openssl_crt_signed_and_chain }}"
    state: link


- name: Ensure Diffie-Hellman parameters are present
  command: openssl dhparam -2 -out {{ openssl_dhparams }} 2048
  args:
    chdir: '/etc/irods'
    creates: '{{ openssl_dhparams }}'


- name: Ensure iRODS has access to PKI files
  file:
    path: '{{ item }}'
    mode: 0600
    group: '{{ irods_service_account }}'
    owner: '{{ irods_service_account }}'
    state: file
  with_items:
    - '/etc/irods/{{ openssl_key_signed }}'
    - '/etc/irods/{{ openssl_dhparams }}'
  when: not ansible_check_mode


- name: Ensure iRODS has access to PKI files
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0644
    group: 'root'
    owner: 'root'
    state: link
  with_items:
    - src: '{{ openssl_certs_dir }}/{{ openssl_crt_signed_and_chain }}'
      dest: '/etc/irods/{{ openssl_crt_signed_and_chain }}'
  when: not ansible_check_mode


- name: Ensure iRODS is configured to use SSL
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/var/lib/irods/.irods/irods_environment.json'
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'irods_ssl_certificate_chain_file'
      value: '/etc/irods/{{ openssl_crt_signed_and_chain }}'
    - key: 'irods_ssl_certificate_key_file'
      value: '/etc/irods/{{ openssl_key_signed }}'
    - key: 'irods_ssl_dh_params_file'
      value: '/etc/irods/{{ openssl_dhparams }}'
    - key: 'irods_client_server_policy'
      value: 'CS_NEG_REQUIRE'
    - key: 'irods_ssl_verify_server'
      value: '{{ irods_ssl_verify_server }}'


- name: Retrieve iRODS server config file
  become_user: '{{ irods_service_account }}'
  become: yes
  slurp:
    src: /etc/irods/server_config.json
  register: server_config
  when: not ansible_check_mode


- name: Retrieve iRODS server zone key
  set_fact:
    zone_key: "{{ (server_config['content'] | b64decode | from_json).zone_key }}"
  when: not ansible_check_mode


- name: Retrieve iRODS server negotiation key
  set_fact:
    negotiation_key: "{{ (server_config['content'] | b64decode | from_json).negotiation_key }}"
  when: not ansible_check_mode


- name: Retrieve iRODS server control plane key
  set_fact:
    server_control_plane_key: "{{ (server_config['content'] | b64decode | from_json).server_control_plane_key }}"
  when: not ansible_check_mode


- name: Ensure iRODS is configured to use SSL connection to database
  ini_file:
    path: /var/lib/irods/.odbc.ini
    section: postgres
    option: 'sslmode'
    value: 'require'
    mode: 0600


- name: Ensure iRODS .ssh directory has strict permissions
  file:
    path: /var/lib/irods/.ssh
    state: directory
    mode: 0700
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'


- name: Install private upload key
  become_user: '{{ irods_service_account }}'
  become: yes
  copy:
    content: '{{ upload_priv_key | b64decode }}'
    dest: '/var/lib/irods/.ssh/id_ed25519'
    owner: '{{ irods_service_account }}'
    mode: 0600
  when: upload_priv_key is defined


- name: Scan public host pub key
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: "ssh-keyscan {{ yoda_public_host }} >> ~/.ssh/known_hosts"
  args:
    creates: '/var/lib/irods/.ssh/known_hosts'
  when: upload_priv_key is defined


- name: Ensure Yoda anonymous user exists
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_mkuser:
    name: anonymous


- name: Ensure anonymous user has iRODS read access on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils -A /{{ irods_zone }}/home | grep "anonymous#"'
  register: read_access
  ignore_errors: true
  changed_when: read_access is failed


- name: Provide iRODS read access for anonymous user on /zone/home
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ichmod -M read anonymous /{{ irods_zone }}/home'
  when: read_access is failed


- name: Check if public collection exists
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ils /{{ irods_zone }}/home/public'
  register: public_coll
  changed_when: false
  failed_when: false


- name: Remove public collection provided that it is empty
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'irmdir /{{ irods_zone }}/home/public'
  when: (not ansible_check_mode) and (public_coll.stdout.find('/home/public') >= 0)


- include_tasks: setup_pam.yml
  when: irods_authentication_scheme == "PAM"
