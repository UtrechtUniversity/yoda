---
# copyright Utrecht University

# Ansible configuration
ansible_user: vagrant                             # Administrative user on instance for Ansible
ansible_ssh_private_key_file: vagrant/ssh/vagrant # Path to private key file of administrative user

# Yoda configuration
instance: surf                                     # Name of Yoda instance, as defined in hosts file
yoda_version: development                          # Git branch, for example: development or release-1.5
yoda_environment: development                      # Yoda environment: development, testing, acceptance or production
yoda_portal_fqdn: portal.surfyoda.test                 # Yoda Portal fully qualified domain name (FQDN)
yoda_davrods_fqdn: data.surfyoda.test                  # Yoda Davrods WebDAV fully qualified domain name (FQDN)
yoda_davrods_anonymous_enabled: true
yoda_davrods_anonymous_fqdn: public.data.surfyoda.test # Yoda Davrods anonymous WebDAV fully qualified domain name (FQDN)

default_yoda_schema: default-1                     # Default Yoda metadata scheme: core-0 or default-1
yoda_prefix: UU01                                  # Prefix for internal portion of persistent identifier
update_schemas: 1                                  # Update already installed schemas, formelements and stylesheets: yes (1) or no (0)
credential_files: PLACEHOLDER                      # Location of Yoda credentials files

# Research module configuration
enable_research: true                              # Enable research module

# OpenSearch module configuration
enable_open_search: false                          # OpenSearch not needed (no deposit module)
opensearch_server: PLACEHODLER

# Deposit module configuration
enable_deposit: false                              # Surf doesn't use deposit module

# Intake module configuration
enable_intake: false                               # Surf doesn't use intake module

# Datarequest module configuration
enable_datarequest: false                          # Surf doesn't use DR module
datarequest_help_contact_name: PLACEHOLDER         # Help contact name
surfdatarequest_help_contact_email: PLACEHOLDER        # Help contact email

# Data Package Reference
enable_data_package_reference: true                # Enable Data Package References for vault data packages

# Data Access Tokens
enable_tokens: true                                     # Enable data access tokens for webDAV and iCommands
token_database: /etc/irods/yoda-ruleset/accesstokens.db # Location of the database that contain the tokens
token_database_password: test                           # Token database password
token_length: 32                                        # Length of data access tokens
token_lifetime: 72                                      # Lifetime of data access tokens (in hours)

# DMF tape archive
enable_tape_archive: false

# Portal customization
yoda_theme_path: /var/www/yoda/themes              # Base path holding customised portal themes
yoda_theme: uu                                     # Yoda theme: uu or vu (default: uu)
portal_title_text: Yoda - Surf Config Test

# iRODS configuration
irods_password: rods                       # iRODS admin password
irods_database_password: irodsdev          # The password for the iRODS database username
irods_zone: tempZone                       # The name of the iRODS Zone
irods_icat_fqdn: portal.surfyoda.test            # iRODS iCAT fully qualified domain name (FQDN)
irods_database_fqdn: portal.surfyoda.test    # iRODS database fully qualified domain name (FQDN)
#irods_resource_fqdn: resource.surfyoda.test    # iRODS resource fully qualified domain name (FQDN)
irods_ssl_verify_server: none              # Verify TLS certificate, use 'cert' for acceptance and production
irods_resources:
  - name: dev001_1
    host: "{{ yoda_davrods_fqdn }}"
    vault_path: /var/lib/irods/Vault1_1
    resource_type: unixfilesystem

  - name: dev001_2
    resource_type: unixfilesystem
    host: "{{ yoda_davrods_fqdn }}"
    vault_path: /var/lib/irods/Vault1_2

  - name: dev001_p1
    resource_type: passthru
    children:
      - dev001_1

  - name: dev001_p2
    resource_type: passthru
    children:
      - dev001_2

  - name: dev001
    resource_type: random
    children:
      - dev001_p1
      - dev001_p2

  - name: irodsResc
    resource_type: random
    children:
      - dev001

  - name: dev002_1
    resource_type: unixfilesystem
    host: resource.surfyoda.test
    vault_path: /var/lib/irods/Vault2_1

  - name: dev002_p1
    resource_type: passthru
    children:
      - dev002_1

  - name: dev002
    resource_type: random
    children:
      - dev002_p1

  - name: irodsRescRepl
    resource_type: random
    children:
      - dev002

# Mail notifications
send_notifications: 0               # Enable notifications: yes (1) or no (0)
notifications_sender_email: noreply@surfyoda.test # Notifiations sender email address
notifications_reply_to: noreply@surfyoda.test     # Notifiations Reply-To email address
smtp_server: smtp://localhost:25
smtp_auth: false
smtp_starttls: false

# DataCite Configuration
datacite_rest_api_url: api.test.datacite.org  # DataCite API server URL
datacite_username: PLACEHOLDER                # DataCite username
datacite_password: PLACEHOLDER                # DataCite password
datacite_prefix: 10.00012                     # DataCite DOI prefix

# EPIC PID Configuration
epic_url: PLACEHOLDER              # EPIC PID server URI (undefined disables EPIC PID)
epic_handle_prefix: PLACEHOLDER    # EPIC PID prefix

# PAM Radius configuration
# server, shared secret, timeout (s)
pam_radius_config: |
  127.0.0.1     secret         1
  other-server  other-secret   3

# Zabbix configuration
zabbix_server: PLACEHOLDER

# Public host configuration
yoda_public_host: data.surfyoda.test       # Yoda public host
yoda_public_fqdn: public.surfyoda.test     # Yoda public fully qualified domain name (FQDN)

# Yoda public upload private key (base64 encoded)
# These keys are the "insecure" public/private keypair we offer for use in development instances.
# If you use this instance for anything other than development, you should create your own keypair.
# ssh-keygen -t ed25519 -> base64
upload_priv_key: |
  LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFB
  QUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFNd0FBQUF0emMyZ3RaVwpReU5UVXhP
  UUFBQUNDTGlhY01DT2xPZzNpSFg4VXdYOHpWUk11cFB2Y2NyTTdmQUNodU9WMi80UUFBQUpoQTVj
  YTlRT1hHCnZRQUFBQXR6YzJndFpXUXlOVFV4T1FBQUFDQ0xpYWNNQ09sT2czaUhYOFV3WDh6VlJN
  dXBQdmNjck03ZkFDaHVPVjIvNFEKQUFBRUFtRng0MmVDSDBYOHFHaXpmUmFpcFJWa3MzcVo1OWda
  SU92TUJkZy85SnhZdUpwd3dJNlU2RGVJZGZ4VEJmek5WRQp5NmsrOXh5c3p0OEFLRzQ1WGIvaEFB
  QUFEbWx5YjJSelFHTnZiV0pwYm1Wa0FRSURCQVVHQnc9PQotLS0tLUVORCBPUEVOU1NIIFBSSVZB
  VEUgS0VZLS0tLS0K

# Yoda public upload public key (base64 encoded)
upload_pub_key: |
  c3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUl1SnB3d0k2VTZEZUlkZnhUQmZ6
  TlZFeTZrKzl4eXN6dDhBS0c0NVhiL2ggaXJvZHNAY29tYmluZWQK

# External user service configuration
yoda_eus_fqdn: eus.surfyoda.test
eus_api_fqdn: api.eus.surfyoda.test
eus_api_secret: PLACEHOLDER
eus_db_password: PLACEHOLDER
eus_smtp_host: localhost
eus_smtp_port: 25
eus_smtp_auth: false
eus_smtp_security: false
eus_smtp_from_address: yoda@surfyoda.test
eus_smtp_replyto_address: yoda@surfyoda.test
eus_mail_template: uu
external_users_domain_filter: uu.nl     # Domains to filter, separated by |

# Openid Connect configuration (This configuration is for TESTING purposes!)
oidc_active: true
oidc_domains: ['gmail.com', 'yoda.test']                      # Domains that should use OIDC (list)
oidc_client_id: myClientId                                    # OIDC Client Id
oidc_client_secret: myClientPassword                          # OIDC Client Secret/Password
oidc_callback_url: https://portal.surfyoda.test/user/callback     # OIDC Callback url
oidc_auth_base_uri: https://oauth.mocklab.io/oauth/authorize  # OIDC Authorization URI without parameters
oidc_token_uri: https://oauth.mocklab.io/oauth/token          # OIDC Token URI
oidc_userinfo_uri: https://oauth.mocklab.io/userinfo          # OIDC Userinfo URI
oidc_scopes: openid                                           # OIDC Scopes
oidc_acr_values: ""                                           # OIDC Authentication Context Class Reference Values
oidc_email_field: email                                       # The identifier of the JSON field in the id_token containing the email address (default: email)
oidc_jwks_uri: https://oauth.mocklab.io/.well-known/jwks.json # The url where the JWKS can be found (Java web key sets)
oidc_jwt_issuer: https://oauth.mocklab.io                     # The issuer of the JWT tokens ('iss' value in JWT, for verification)
oidc_req_exp: true      #check that exp (expiration) claim is present
oidc_req_iat: false     #check that iat (issued at) claim is present
oidc_req_nbf: false     #check that nbf (not before) claim is present
oidc_verify_aud: true   #check that aud (audience) claim matches audience
oidc_verify_iat: false  #check that iat (issued at) claim value is an integer
oidc_verify_exp: true   #check that exp (expiration) claim value is OK
oidc_verify_iss: true   #check that iss (issue) claim is as expected

# Mail configuration
enable_mailpit: true
enable_postfix: false
